<?xml version="1.0" encoding="UTF-8"?>
<sequence name="IN_SEQ_MESSAGE_MEDIATION_PROCESS_API_RSU_CONSOMMATION_SERVICES" trace="disable" xmlns="http://ws.apache.org/ns/synapse">
    <property expression="get-property('registry','conf:/resources/v1/properties/RSU_PROPERTIES_FILE.xml')" name="xmlFile" scope="default" type="OM"/>
    <property expression="$ctx:xmlFile//ApiKeyConsommationServices" name="regPropertyApiKey" scope="default" type="STRING"/>
    <header expression="$ctx:regPropertyApiKey" name="apikey" scope="transport"/>
    <property expression="$url:codeAller" name="uri.var.codeAller" scope="default" type="STRING"/>
    <property expression="$url:idcs" name="uri.var.idcs" scope="default" type="STRING"/>
    <property expression="$url:cnie" name="uri.var.cnie" scope="default" type="STRING"/>
    <property expression="$url:cil" name="uri.var.cil" scope="default" type="STRING"/>
    <property expression="$url:commune" name="uri.var.commune" scope="default" type="STRING"/>
    <property expression="$url:dateDebut" name="uri.var.dateDebut" scope="default" type="STRING"/>
    <property expression="$url:dateFin" name="uri.var.dateFin" scope="default" type="STRING"/>
    <log>
        <property expression="$axis2:REST_URL_POSTFIX" name="The basePath comming from experience api"/>
    </log>
    <property action="remove" name="REST_URL_POSTFIX" scope="axis2"/>
    <call blocking="true">
        <endpoint key="conf:resources/v1/endpoints/SYSTEM_API_RSU_CONSOMMATION_SERVICES.xml"/>
    </call>
    <property expression="json-eval($.consommation.codeRetour)" name="codeRetour" scope="default" type="STRING"/>
    <switch source="get-property('codeRetour')">
        <case regex="^000$|^400$|^500$|^100$|^300$|^600$|^700$">
            <filter regex="^null$" source="get-property('codeRetour')">
                <then>
                    <payloadFactory media-type="json">
                        <format>
							{
							"codeRetour": "$1"
							}
						</format>
                        <args>
                            <arg evaluator="json" expression="get-property('codeRetour')"/>
                        </args>
                    </payloadFactory>
                </then>
                <else/>
            </filter>
        </case>
        <default>
            <filter regex="^200$" source="get-property('codeRetour')">
                <then>
                    <property expression="$ctx:response" name="responseScript" scope="default" type="STRING"/>
                    <payloadFactory media-type="json">
                        <format>
							{
							"consommation": {
							"codeRetour": "$1",
							"cnie": "$2",
							"nomPrenom":
							"$3",
							"prefecture": "$4",
							"commune": "$5",
							"quartier":"$6",
							"sousQuartier": "$7",
							"immeuble": "$8",
							"complementAdresse": "$9"
							 }
							}
						</format>
                        <args>
                            <arg evaluator="json" expression="$.consommation.codeRetour"/>
                            <arg evaluator="json" expression="$.consommation.cnie"/>
                            <arg evaluator="json" expression="$.consommation.nomPrenom"/>
                            <arg evaluator="json" expression="$.consommation.prefecture"/>
                            <arg evaluator="json" expression="$.consommation.commune"/>
                            <arg evaluator="json" expression="$.consommation.quartier"/>
                            <arg evaluator="json" expression="$.consommation.sousquartier"/>
                            <arg evaluator="json" expression="$.consommation.immeuble"/>
                            <arg evaluator="json" expression="$.consommation.complementAdresse"/>
                        </args>
                    </payloadFactory>
                </then>
                <else>
                    <payloadFactory media-type="json">
                        <format>
							{
							"codeRetour": "600"
							}
						</format>
                        <args/>
                    </payloadFactory>
                </else>
            </filter>
        </default>
    </switch>
    <header action="remove" name="apikey" scope="transport"/>
    <header action="remove" name="X-Client-ID" scope="transport"/>
    <header action="remove" name="X-Request-ID" scope="transport"/>
    <header action="remove" name="X-Request-Application-Name" scope="transport"/>
    <respond/>
</sequence>
