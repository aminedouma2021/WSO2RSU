<?xml version="1.0" encoding="UTF-8"?>
<sequence name="IN_SEQ_MESSAGE_MEDIATION_PROCESS_API_RSU_CONSOMMATION_SERVICES" trace="disable" xmlns="http://ws.apache.org/ns/synapse">
    <property expression="get-property('registry','conf:/resources/v1/properties/RSU_PROPERTIES_FILE.xml')" name="xmlFile" scope="default" type="OM"/>
    <property expression="$ctx:xmlFile//ApiKeyConsommationServices" name="regPropertyApiKey" scope="default" type="STRING"/>
    <header expression="$ctx:regPropertyApiKey" name="apikey" scope="transport"/>
    <property expression="$url:codeAller" name="uri.var.codeAller" scope="default" type="STRING"/>
    <property expression="$url:idcs" name="uri.var.idcs" scope="default" type="STRING"/>
    <property expression="$url:cnie" name="uri.var.cnie" scope="default" type="STRING"/>
    <property expression="$url:cil" name="uri.var.cil" scope="default" type="STRING"/>
    <property expression="$url:commune" name="uri.var.commune" scope="default" type="STRING"/>
    <property expression="$url:dateDebut" name="uri.var.dateDebut" scope="default" type="STRING"/>
    <property expression="$url:dateFin" name="uri.var.dateFin" scope="default" type="STRING"/>
    <property action="remove" name="REST_URL_POSTFIX" scope="axis2"/>
    <call blocking="true">
        <endpoint key="conf:resources/v1/endpoints/SYSTEM_API_RSU_CONSOMMATION_SERVICES.xml"/>
    </call>
    <property expression="json-eval($.codeRetour)" name="codeRetour" scope="default" type="STRING"/>
    <switch source="json-eval($.codeRetour)">
        <case regex="^000$|^200$|^400$|^500$|^100$|^300$|^600$|^700$">
            <filter regex="^null$" source="json-eval($.codeRetour)">
                <then>
                    <payloadFactory media-type="json">
                        <format>
							{
							"codeRetour": "$1"
							}
						</format>
                        <args>
                            <arg evaluator="xml" expression="get-property('codeRetour')"/>
                        </args>
                    </payloadFactory>
                </then>
                <else/>
            </filter>
        </case>
        <default>
            <property expression="json-eval($.codeRetour)" name="codeRetour" scope="default" type="STRING"/>
            <filter regex="^null$" source="json-eval($.codeRetour)">
                <then>
                    <script language="js"><![CDATA[payload = mc.getPayloadJSON();
					consommations = payload.consommation;
					var response = new Array();
					var isChecked = new Boolean(false);
					 for (i = 0; i < consommations.length; i++) {
					    location_object = consommations[i];
					    const existe = location_object.listeConsommations[i].annee.find(function (el) {
                         return el > 2020;
                          });
                        console.log(x);

					 if(existe > 0 && existe != null){
					   response[i]=location_object;
					    }	 
					 }
					 mc.setPayloadJSON(response);]]></script>
                    <property expression="get-property('response')" name="response" scope="default" type="STRING"/>
                    <filter regex="^null$" source="get-property('response')">
                        <then>
                            <payloadFactory media-type="json">
                                <format>
									{
									"consommation": [{
									"codeRetour": "$1",
									"cnie": "$2",
									"nomPrenom": "$3",
									"prefecture": "$4",
									"commune": "$5",
									"quartier":"$6",
									"sousQuartier": "$7",
									"immeuble": "$8",
									"complementAdresse": "$9"
									}]
									}
								</format>
                                <args>
                                    <arg evaluator="json" expression="get-property('response.codeRetour')"/>
                                    <arg evaluator="json" expression="get-property('response.cnie')"/>
                                    <arg evaluator="json" expression="get-property('response.nomPrenom')"/>
                                    <arg evaluator="json" expression="get-property('response.prefecture')"/>
                                    <arg evaluator="json" expression="get-property('response.commune')"/>
                                    <arg evaluator="json" expression="get-property('response.quartier')"/>
                                    <arg evaluator="json" expression="get-property('response.sousquartier')"/>
                                    <arg evaluator="json" expression="get-property('response.immeuble')"/>
                                    <arg evaluator="json" expression="get-property('response.complementAdresse')"/>
                                </args>
                            </payloadFactory>
                        </then>
                        <else>
                            <payloadFactory media-type="json">
                                <format>
									{
									"codeRetour": "600"
									}
								</format>
                                <args/>
                            </payloadFactory>
                        </else>
                    </filter>
                </then>
                <else>
                    <payloadFactory media-type="json">
                        <format>
							{
							"codeRetour": "600"
							}
						</format>
                        <args/>
                    </payloadFactory>
                </else>
            </filter>
        </default>
    </switch>
    <header action="remove" name="apikey" scope="transport"/>
    <header action="remove" name="X-Client-ID" scope="transport"/>
    <header action="remove" name="X-Request-ID" scope="transport"/>
    <header action="remove" name="X-Request-Application-Name" scope="transport"/>
    <respond/>
</sequence>
